<?php

namespace common\models;

use Yii;
use yii\base\Exception;

/**
 * This is the model class for table "cash_ticket_record".
 *
 * @property int $id
 * @property int $mid 拥有这张券的人的mid
 * @property string $name 名称
 * @property int $status 0 未使用，1 使用中，2 已使用，3 已过期
 * @property int $event_id 标记返现券是哪个活动发的，非活动发放就用0
 * @property int $expired_day 过期天数，发放后多少天不使用就会过期
 * @property int $valid_day 有效天数，使用后返现券的有效天数
 * @property string $money 兑换金额，使用中就是预计兑换金额
 * @property string $color 返现券颜色组
 * @property string $description 对返现券的描述，说明等
 * @property int $ticket_level 返现券级别，1 银券，2 金券，3 白金券
 * @property string $real_money 返现券兑换七天后到账，中间如有问题，发放金额可能会有变化
 * @property string $remark 备注，有需要就备注一下，没需要可以不写
 * @property string $message 如果实际发放金额和兑换金额不同，这里记录一下原因
 * @property int $refer_id 关联的money表记录
 * @property int $exchange_type 兑换方式；0 到期自动兑换，1 主动兑换
 * @property int $exchange_time 返现券的兑换时间
 * @property int $used_day 返现券的使用时间，按天计算即当天的零点零分
 * @property int $used_time 返现券的使用时间
 * @property int $expired_time 过期时间，通过发放时间和过期天数算的，方便数据库查询
 * @property int $created_at 创建时间即返现券的发放时间
 * @property int $updated_at 更新时间
 */
class CashTicketRecord extends \yii\db\ActiveRecord
{
	const STATUS_UNUSED = 0;
	const STATUS_USING = 1;
	const STATUS_USED = 2;
	const STATUS_EXPIRED = 3;
	const STATUS_SETTLED = 4;

	// 返现券级别
	const TICKET_LEVEL_1 = 1; 	// 银券
	const TICKET_LEVEL_2 = 2;	// 金券
	const TICKET_LEVEL_3 = 3;	// 白金券

	public static function levelList()
	{
		return [
			self::TICKET_LEVEL_1 => Yii::t('app', '银券'),
			self::TICKET_LEVEL_2 => Yii::t('app', '金券'),
			self::TICKET_LEVEL_3 => Yii::t('app', '白金券'),
		];
	}

	public static function statusList()
	{
		return [
			self::STATUS_UNUSED => Yii::t('app', '未使用'),
			self::STATUS_USING => Yii::t('app', '使用中'),
			self::STATUS_USED => Yii::t('app', '已兑换'),
			self::STATUS_EXPIRED => Yii::t('app', '已过期'),
			self::STATUS_SETTLED => Yii::t('app', '已结算'),
		];
	}

	public static function exchangeTypeList()
	{
		return [
			0 => Yii::t('app', '未知'),
			1 => Yii::t('app', '手动'),
			2 => Yii::t('app', '自动'),
		];
	}



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'cash_ticket_record';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
		return [
			[['mid', 'expired_day', 'valid_day'], 'required'],
			[['mid', 'status', 'event_id', 'expired_day', 'valid_day', 'ticket_level', 'exchange_type', 'exchange_time', 'used_day', 'used_time', 'refer_id', 'expired_time', 'created_at', 'updated_at'], 'integer'],
			[['money', 'real_money'], 'number'],
			[['color'], 'string', 'max' => 32],
			[['description', 'remark', 'message'], 'string', 'max' => 255],
		];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'mid' => Yii::t('app', '拥有人（mid）'),
			'name' => Yii::t('app', '种类'),
            'status' => Yii::t('app', '状态'),
            'event_id' => Yii::t('app', '活动ID'),
            'expired_day' => Yii::t('app', '过期天数'),
            'valid_day' => Yii::t('app', '有效天数'),
            'money' => Yii::t('app', '金额'),
            'color' => Yii::t('app', '颜色'),
            'description' => Yii::t('app', '描述'),
            'ticket_level' => Yii::t('app', '种类'),
            'real_money' => Yii::t('app', '实发金额'),
            'remark' => Yii::t('app', '备注'),
            'message' => Yii::t('app', '备注2'),
			'refer_id' => Yii::t('app', '关联ID'),
            'exchange_type' => Yii::t('app', '兑换方式'),
            'exchange_time' => Yii::t('app', '兑换时间'),
			'expired_time' => Yii::t('app', '过期时间'),
            'created_at' => Yii::t('app', '发放时间'),
            'updated_at' => Yii::t('app', '更新时间'),
        ];
    }

	public function beforeSave($insert)
	{
		if ($this->isNewRecord) {
			$this->created_at = time();
			$this->expired_time = $this->created_at + $this->expired_day * 86400;
		}
		$this->updated_at = time();

		if (empty($this->description)) {
			$this->description = $this->getDescription();
		}
		if (empty($this->color)) {
			$this->color = CashTicketRecord::getLevelColor($this->ticket_level);
		}
		if (empty($this->name)) {
			$this->name = CashTicketRecord::getLevelName($this->ticket_level);
		}

		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	// 转换成前端需要的字段
	public function frontItem(User $user)
	{
		$item = [
			'id' => $this->id,
			'name' => $this->name,
			'status' => $this->status,
			'expired_time' => 0,
			'used_time' => $this->used_day,
			'exchange_time' => $this->exchange_time,
			'money' => '' . ($this->real_money > 0 ? $this->real_money : $this->money),
			'light_color' => '#FAFDFF',
			'dark_color' => '#A6C5DB',
			'using_desc' => '',
			'description' => $this->getDescription(),
			'ticket_level' => $this->ticket_level,
		];

		$colors = explode(',', $this->color);
		if (2 == count($colors)) {
			$item['light_color'] = $colors[0];
			$item['dark_color'] = $colors[1];
		}

		// 过期时间=发放时间+过期天数
		$item['expired_time'] = $this->created_at + $this->expired_day * 86400;
		if (CashTicketRecord::STATUS_USING == $this->status) {
			// 使用中的返现券 过期时间=使用时间+有效时间
			$item['expired_time'] = $this->used_day + $this->valid_day * 86400;

			$info = $this->getUsingInfo($user);
			$item['using_desc'] = $info['desc'];
			$item['money'] = '' . $info['money'];
		}

		return $item;
	}

	public function getDescription() {
		if ($this->description) {
			return $this->description;
		} else {
			/**
			 * 银券：交易黄金 4美元/手 白银 7美元/手 	其他 1美元/手
			 * 金券：交易黄金 6美元/手 白银 13美元/手 	其他 2美元/手
			 * 白金：交易黄金 8美元/手 白银 25美元/手 	其他 4美元/手
			 */
			if ($this->ticket_level == CashTicketRecord::TICKET_LEVEL_1) { // 银券
				return '依建仓交易返现，外汇、原油、指数：$1/lots，黄金：$4/lots，白银：$7/lots';
			} elseif ($this->ticket_level == CashTicketRecord::TICKET_LEVEL_2) { // 金券
				return '依建仓交易返现，外汇、原油、指数：$2/lots，黄金：$6/lots，白银：$13/lots';
			} elseif ($this->ticket_level == CashTicketRecord::TICKET_LEVEL_3) { // 白金券
				return '依建仓交易返现，外汇、原油、指数：$4/lots，黄金：$8/lots，白银：$25/lots';
			}
		}
		return '';
	}

	public function getUsingInfo(User $user)
	{
		$startTime = $this->used_day;
		$endTime = $this->used_day + $this->valid_day * 86400;

		$loginArr = [];
		$accounts = $user->getTradeAccounts(1);
		foreach ($accounts as $account) { // 标准账号
			if ($account->account_type == AccountType::TYPE_DEFAULT) {
				$loginArr[] = $account->login;
			}
		}

		/**
		 * 银券：交易黄金 4美元/手 白银 7美元/手 	其他 1美元/手
		 * 金券：交易黄金 6美元/手 白银 13美元/手 	其他 2美元/手
		 * 白金：交易黄金 8美元/手 白银 25美元/手 	其他 4美元/手
		 */
		$xauVolume = Trade::find()->where(['login' => $loginArr])
			->andWhere(['symbol' => 'XAUUSD'])
			->andWhere(['>=', 'right_open_time', $startTime])
			->andWhere(['<=', 'right_open_time', $endTime])
			->andWhere(['cmd'=> [0, 1],'login_type'=>1])//live账号
			->sum('volume');

		$xagVolume = Trade::find()->where(['login' => $loginArr])
			->andWhere(['symbol' => 'XAGUSD'])
			->andWhere(['>=', 'right_open_time', $startTime])
			->andWhere(['<=', 'right_open_time', $endTime])
			->andWhere(['cmd'=> [0, 1],'login_type'=>1])//live账号
			->sum('volume');

		$otherVolume = Trade::find()->where(['login' => $loginArr])
			->andWhere(['!=', 'symbol', 'XAUUSD'])
			->andWhere(['!=', 'symbol', 'XAGUSD'])
			->andWhere(['>=', 'right_open_time', $startTime])
			->andWhere(['<=', 'right_open_time', $endTime])
			->andWhere(['cmd'=> [0, 1],'login_type'=>1])//live账号
			->sum('volume');

		$lots = [round($xauVolume / 100, 2), round($xagVolume / 100, 2), round($otherVolume / 100, 2)];
		if (CashTicketRecord::TICKET_LEVEL_1 == $this->ticket_level) { // 银券
			return [
				'desc' => CashTicketRecord::getCurrentDesc($lots),
				'money' => round((4 * $xauVolume + 7 * $xagVolume + $otherVolume) / 100, 2)
			];
		} elseif ($this->ticket_level == CashTicketRecord::TICKET_LEVEL_2) { // 金券
			return [
				'desc' => CashTicketRecord::getCurrentDesc($lots),
				'money' => round((6 * $xauVolume + 13 * $xagVolume + 2 * $otherVolume) / 100, 2)
			];
		} elseif ($this->ticket_level == CashTicketRecord::TICKET_LEVEL_3) { // 白金券
			return [
				'desc' => CashTicketRecord::getCurrentDesc($lots),
				'money' => round((8 * $xauVolume + 25 * $xagVolume + 4 * $otherVolume) / 100, 2)
			];
		}
		return [ 'desc' => '', 'money' => 0 ];
	}

	public static function getCurrentDesc($lots) {
		$a0 = $lots[0]; // 黄金
		$a1 = $lots[1]; // 白银
		$a2 = $lots[2]; // 其他

		return Yii::t('api', '外汇、原油、指数: {l1} lots | 黄金：{l2} lots | 白银：{l3} lots', [
			'l1' => $a2, 'l2' => $a0, 'l3' => $a1
		]);
//		return "外汇、原油、指数: {$a2} lots | 黄金：{$a0} lots | 白银：{$a1} lots";
	}

	public static function getLevelColor($level)
	{
		if (CashTicketRecord::TICKET_LEVEL_1 == $level) {
			return '#FAFDFF,#A6C5DB';
		} elseif (CashTicketRecord::TICKET_LEVEL_2 == $level) {
			return '#FEFCF9,#DBC7A7';
		} elseif (CashTicketRecord::TICKET_LEVEL_3 == $level) {
			return '#FFFAFC,#DBA7B9';
		}
		return '#FAFDFF,#A6C5DB';
	}

	public static function getLevelName($level)
	{
		if (CashTicketRecord::TICKET_LEVEL_1 == $level) {
			return Yii::t('app', '银券');
		} elseif (CashTicketRecord::TICKET_LEVEL_2 == $level) {
			return Yii::t('app', '金券');
		} elseif (CashTicketRecord::TICKET_LEVEL_3 == $level) {
			return Yii::t('app', '白金券');
		}
		return Yii::t('app', '返现券');
	}

	public static function createEmptyRecord($mid, $level, $expiredDay = 10, $validDay = 15, $eventId = 0, $bSave = false) {
		// 返现券必须设置拥有者，使用有效期，未使用过期时间
		if ($mid <= 0 || $expiredDay <= 0 || $validDay <= 0 || $level <= 0) {
			throw new Exception(Yii::t('api', '数据错误'));
		}

		$record = new CashTicketRecord();

		$record->mid = $mid;
		$record->status = 0; // 未使用
		$record->event_id = $eventId; // 哪个活动发放的
		$record->expired_day = $expiredDay;
		$record->valid_day = $validDay;
		$record->money = 0;
		$record->ticket_level = $level;
		$record->name = CashTicketRecord::getLevelName($level);;
		$record->color = CashTicketRecord::getLevelColor($level);
		$record->description = $record->getDescription(); // 非静态函数，设置完ticket_level再使用
		$record->remark = '';
		$record->exchange_type = 0;

		if ($bSave) {
			$record->save(false);
		}

		return $record;
	}

}
